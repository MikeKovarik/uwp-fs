import {Uint8Array, ArrayBuffer, Blob, File, FileReader, ReadableStream, WritableStream} from './util.mjs'
import {Buffer, Readable, Writable} from './util.mjs'
import {nextTick, isNativeNode} from './util.mjs'


export var originalBufferFrom = Buffer ? Buffer.from : undefined



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// Node.js Buffer ////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


export function bufferFromTypedArray(array = this) {
	if (array instanceof Uint8Array) {
		return originalBufferFrom(array)
	} else {
		throw new Error('Buffer.fromTypedArray does not implement other types than Uint8Array')
	}
	// TODO
}

export function bufferFromArrayBuffer(arrayBuffer = this) {
	if (isNativeNode)
		return originalBufferFrom(new Uint8Array(arrayBuffer))
	else
		return originalBufferFrom(arrayBuffer)
}

// returns promise
export function bufferFromBlob(blob = this) {
	return new Promise((resolve, reject) => {
		var reader = new FileReader()
		reader.onload = e => {
			var buffer = bufferFromArrayBuffer(reader.result)
			resolve(buffer)
		}
		reader.readAsArrayBuffer(blob)
	})
}

// returns promise with the buffer as a callback argument
export function bufferFromReadable(stream = this) {
	return new Promise((resolve, reject) => {
		var chunks = []
		stream.on('data', data => chunks.push(data))
		stream.on('end', () => resolve(Buffer.concat(chunks)))
	})
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// Uint8Array ////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// ArrayBuffer ///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


export function arrayBufferFromBuffer(buffer = this) {
	return (new Uint8Array(buffer)).buffer
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// Blob / File ///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
